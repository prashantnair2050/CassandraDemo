Apache Cassandra Training
Trainer: Prashant Nair
==========================================================================================================================================================

Making CQLSH connect to desired host directly
----------------------------------------------

export CQLSH_HOST='192.168.199.130'

or

echo 'export CQLSH_HOST=192.168.199.130' >> .bashrc
exec bash

cqlsh

sudo init 6


sudo dhclient -r
sudo dhclient

Adding/Bootstrapping Nodes
===========================

1. Use Node5 for Bootstrapping Example

2. Setup Hostname and Hosts file (node5). Hosts file must be updated in remaining node. (optional)

3. Setup Cassandra with the same configurations done in existing cluster and make seed as node2 

listen_address: IPAddressOfNode5
rpc_address: IPAddressOfNode5
seeds: IPAddressOfNode2


4. Start cassandra service on node5 in foreground mode.


Decommission a Node in the cluster
====================================
Decommissioning is a process of removing a node GRACEFULLY !!

All the systems in the cluster will be notified about decommissioning via. Gossip

 - The Token gets reassigned.

 - The data gets reassigned based on their token

 - The system will be removed from the ring


nodetool -h 192.168.199.133 -p 7199 decommission


Note: Decommission can happen only with UN systems



Removing a Dead Node
======================================

All systems will be notified about Forceful Removal

Here only Token gets reassigned, however there is a chance of data loss.

COmmand:

nodetool removenode <hostid>



Hinted-Handoff Demo
======================


1. Login to cqlsh
	cqlsh node1 (Here node1 will be the coordinator)

2. Create a Keyspace

CREATE KEYSPACE hr WITH ....

3. Create a Table

CREATE TABLE emp
(eid int,
esal int,
PRIMARY KEY(eid));


4. Create a Duplicate Session and get the endpoints for record 1
	Node1
	Node2

nodetool getendpoints hr emp 2
	
5. Shutdown cassandra in one machine (Node2)

6. Perform Insert Query with tracing enabled. Observe the log of Write Operation in Node1 followed by a log of Hints in Node3.

7. Shutdown Cassandra in Node1

8. Start Cassandra in Node2 and Observe Hint Log in Node3.

9. Try select * from emp where eid = 1; (Enable Tracing) (Response from Node2)

INternal Authentication ( Password Protect ) (GRANT/REVOKE)
-----------------------------------------------------------

cassandra.yaml

authenticator: AllowAllAuthenticator / PasswordAuthenticator ( Allowed for using cqlsh or any external communication using a username/passowrd pair)


authorizer: AllowAllAuthorizer / CassandraAuthorizer (Enable GRANT Revoke)

Lab: Enabling Authentication
------------------------------

1. Stop Cassandra Service

2. Open cassandra.yaml

	authenticator: PasswordAuthenticator

3. Start Cassandra service


cqlsh -u cassandra -p cassandra node1

4. Create Users

cqlsh> LIST USERS ;

 name      | super
-----------+-------
 cassandra |  True

(1 rows)


cqlsh> CREATE USER 'prashant' WITH PASSWORD '123456' SUPERUSER ;

cqlsh> CREATE USER 'prashant1' WITH PASSWORD '123456';
cqlsh> LIST USERS;

 name      | super
-----------+-------
  prashant |  True
 cassandra |  True
 prashant1 |  False

cqlsh> DROP USER 'prashant1';


Lab: Enabling Authorization
---------------------------
	

1. Stop Cassandra Service

2. Open cassandra.yaml

	authorizer: CassandraAuthorizer

3. Start Cassandra service

4. Example

cqlsh:hr> CREATE USER 'limited' WITH PASSWORD '123456';
cqlsh:hr> GRANT SELECT ON hr.emp TO limited ;

cqlsh node2 -u limited -p 123456

cqlsh:hr> select * from emp;

 eid | esal
-----+------
   1 |  100
   2 |  200

(2 rows)

cqlsh:hr> INSERT INTO emp (eid, esal ) VALUES ( 3,330);
Bad Request: User limited has no MODIFY permission on <table hr.emp> or any of its parents

Checking permissions for each users
====================================

cassandra@node2:~$ cqlsh node2 -u prashant -p 123456
Connected to Test Cluster at node2:9160.
[cqlsh 4.1.1 | Cassandra 2.0.7 | CQL spec 3.1.1 | Thrift protocol 19.39.0]
Use HELP for help.
cqlsh> DESCRIBE KEYSPACES;

system  hr  system_auth  OpsCenter  system_traces

cqlsh> use system_auth ;
cqlsh:system_auth> DESCRIBE TABLES;

credentials  permissions  users

cqlsh:system_auth> select * from permissions ;

 username | resource    | permissions
----------+-------------+-------------
 prashant | data/hr/emp |  {'SELECT'}
  limited | data/hr/emp |  {'SELECT'}

(2 rows)


ALTER USER 'abc' WITH PASSWORD '123456';





Consistency
============

Its all about ensuring accuracy of the data to be maintained within the replica set.


Levels of Consistency in Cassandra:
====================================

Consistency Level		Operations

ONE --------------------------> READ AND WRITE Operation
TWO --------------------------> READ AND WRITE Operation
THREE --------------------------> READ AND WRITE Operation
ALL --------------------------> READ AND WRITE Operation
QUORUM --------------------------> READ AND WRITE Operation
LOCAL_QUORUM --------------------------> READ AND WRITE Operation (applied on multi-dc cluster)

	e.g. dc1 RF= 3 , dc2 RF= 4  -----> Cluster 1
	
		CONSISTENCY LOCAL_QUORUM

	for dc1 = int(3/2) + 1 = 2
	for dc2 = int(4/2) + 1 = 3

ANY -------------------------> WRITE OPeration



Consistency ALL ---> ALL == RF value for given keyspace

hr --> RF = 2 

CONSISTENCY 2


Perform Consistency Demo. Ensure you use the below command to identify which endpoints are responsible for data handling

nodetool getendpoints hr emp



Consistency Code Example
-------------------------

1. Download program with dependencies

wget https://github.com/prashantnair2050/CassandraDemo/raw/refs/heads/main/cassandra_driver.tar.gz

2. Extract the same

tar -xvzf cassandra_driver.tar.gz

3. Compile code

javac -cp ".:java-driver-core-4.15.0.jar:native-protocol-1.5.1.jar:java-driver-shaded-guava-25.1-jre.jar:config-1.4.2.jar:typesafe-config-1.4.2.jar:netty-handler-4.1.100.Final.jar:netty-buffer-4.1.100.Final.jar:netty-transport-4.1.100.Final.jar:netty-common-4.1.100.Final.jar:netty-codec-4.1.100.Final.jar:netty-resolver-4.1.100.Final.jar:slf4j-api-1.7.36.jar:slf4j-simple-1.7.36.jar:jnr-posix-3.1.17.jar:jnr-ffi-2.2.12.jar:jnr-constants-0.10.4.jar" CassandraClientDemo.java

4. Run code

java -cp ".:java-driver-core-4.15.0.jar:native-protocol-1.5.1.jar:java-driver-shaded-guava-25.1-jre.jar:config-1.4.2.jar:typesafe-config-1.4.2.jar:netty-handler-4.1.100.Final.jar:netty-buffer-4.1.100.Final.jar:netty-transport-4.1.100.Final.jar:netty-common-4.1.100.Final.jar:netty-codec-4.1.100.Final.jar:netty-resolver-4.1.100.Final.jar:slf4j-api-1.7.36.jar:slf4j-simple-1.7.36.jar:jnr-posix-3.1.17.jar:jnr-ffi-2.2.12.jar:jnr-constants-0.10.4.jar" CassandraClientDemo



Task - Convert your 4 node cluster with the specs shared below:

1. Ensure num_tokens are enabled with values as 16
2. Ensure your SSTABLES are stored in the location /home/cassandra/disk1/sstables
3. Ensure your CommitLOG is stored in the location /home/cassandra/disk1/commitlog
4. Ensure your Cache Directory is stored in location /home/cassandra/disk1/caches



Solution:
Step1: Ensure cassandra service is stopped in all machines
Step2: Alter cassandra.yaml in all the machines

1. Ensure vNodes are enabled with values as 1
Uncomment num_tokens: 1

2. Ensure your SSTABLES are stored in the location /home/cassandra/disk1/sstables
data_file_directories: 

3. Ensure your CommitLOG is stored in the location /home/cassandra/disk1/commitlog
commitlog_directory:

4. Ensure your Cache Directory is stored in location /home/cassandra/disk1/caches
saved_caches_directory:



